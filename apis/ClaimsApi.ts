/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Claim,
  ClaimCreate,
  ClaimPatch,
  ClaimUpdate,
  ClaimsClaimIdThirdPartyEntitiesGet200Response,
  ClaimsClaimIdWithEntitiesGet200Response,
  GetClaims200Response,
  GetEmailSummaries200Response,
  ValidationErrors,
} from '../models/index';
import {
    ClaimFromJSON,
    ClaimToJSON,
    ClaimCreateFromJSON,
    ClaimCreateToJSON,
    ClaimPatchFromJSON,
    ClaimPatchToJSON,
    ClaimUpdateFromJSON,
    ClaimUpdateToJSON,
    ClaimsClaimIdThirdPartyEntitiesGet200ResponseFromJSON,
    ClaimsClaimIdThirdPartyEntitiesGet200ResponseToJSON,
    ClaimsClaimIdWithEntitiesGet200ResponseFromJSON,
    ClaimsClaimIdWithEntitiesGet200ResponseToJSON,
    GetClaims200ResponseFromJSON,
    GetClaims200ResponseToJSON,
    GetEmailSummaries200ResponseFromJSON,
    GetEmailSummaries200ResponseToJSON,
    ValidationErrorsFromJSON,
    ValidationErrorsToJSON,
} from '../models/index';

export interface ClaimsApiAssociateEmailSummaryWithClaimRequest {
    claimID: string;
    summaryID: string;
}

export interface ClaimsApiClaimsClaimIdThirdPartyEntitiesGetRequest {
    claimId: string;
    entityType?: ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface ClaimsApiClaimsClaimIdWithEntitiesGetRequest {
    claimId: string;
}

export interface ClaimsApiCreateClaimRequest {
    claimCreate: ClaimCreate;
}

export interface ClaimsApiDeleteClaimRequest {
    claimId: string;
}

export interface ClaimsApiGetClaimRequest {
    claimId: string;
}

export interface ClaimsApiGetClaimEmailSummariesRequest {
    claimID: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface ClaimsApiGetClaimsRequest {
    brokerClaimReference?: string;
    brokerPolicyReference?: string;
    policyId?: string;
    status?: GetClaimsStatusEnum;
    type?: string;
    participation?: string;
    classOfBusiness?: string;
    riskCode?: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface ClaimsApiPatchClaimRequest {
    claimId: string;
    claimPatch: ClaimPatch;
}

export interface ClaimsApiRemoveEmailSummaryFromClaimRequest {
    claimID: string;
    summaryID: string;
}

export interface ClaimsApiUpdateClaimRequest {
    claimId: string;
    claimUpdate: ClaimUpdate;
}

/**
 * 
 */
export class ClaimsApi extends runtime.BaseAPI {

    /**
     * Create an association between an email summary and a claim
     * Associate Email Summary with Claim
     */
    async associateEmailSummaryWithClaimRaw(requestParameters: ClaimsApiAssociateEmailSummaryWithClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['claimID'] == null) {
            throw new runtime.RequiredError(
                'claimID',
                'Required parameter "claimID" was null or undefined when calling associateEmailSummaryWithClaim().'
            );
        }

        if (requestParameters['summaryID'] == null) {
            throw new runtime.RequiredError(
                'summaryID',
                'Required parameter "summaryID" was null or undefined when calling associateEmailSummaryWithClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claimID}/email-summaries/{summaryID}`.replace(`{${"claimID"}}`, encodeURIComponent(String(requestParameters['claimID']))).replace(`{${"summaryID"}}`, encodeURIComponent(String(requestParameters['summaryID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an association between an email summary and a claim
     * Associate Email Summary with Claim
     */
    async associateEmailSummaryWithClaim(requestParameters: ClaimsApiAssociateEmailSummaryWithClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.associateEmailSummaryWithClaimRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all third parties associated with a specific claim
     * Get Third Parties
     */
    async claimsClaimIdThirdPartyEntitiesGetRaw(requestParameters: ClaimsApiClaimsClaimIdThirdPartyEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimsClaimIdThirdPartyEntitiesGet200Response>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling claimsClaimIdThirdPartyEntitiesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['entityType'] != null) {
            queryParameters['entity_type'] = requestParameters['entityType'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/third-party-entities`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimsClaimIdThirdPartyEntitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all third parties associated with a specific claim
     * Get Third Parties
     */
    async claimsClaimIdThirdPartyEntitiesGet(requestParameters: ClaimsApiClaimsClaimIdThirdPartyEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimsClaimIdThirdPartyEntitiesGet200Response> {
        const response = await this.claimsClaimIdThirdPartyEntitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a claim along with all its associated third parties
     * Get Claim with Third Parties
     */
    async claimsClaimIdWithEntitiesGetRaw(requestParameters: ClaimsApiClaimsClaimIdWithEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimsClaimIdWithEntitiesGet200Response>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling claimsClaimIdWithEntitiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/with-entities`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimsClaimIdWithEntitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a claim along with all its associated third parties
     * Get Claim with Third Parties
     */
    async claimsClaimIdWithEntitiesGet(requestParameters: ClaimsApiClaimsClaimIdWithEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimsClaimIdWithEntitiesGet200Response> {
        const response = await this.claimsClaimIdWithEntitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new claim
     * Create a Claim
     */
    async createClaimRaw(requestParameters: ClaimsApiCreateClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Claim>> {
        if (requestParameters['claimCreate'] == null) {
            throw new runtime.RequiredError(
                'claimCreate',
                'Required parameter "claimCreate" was null or undefined when calling createClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimCreateToJSON(requestParameters['claimCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimFromJSON(jsonValue));
    }

    /**
     * Create a new claim
     * Create a Claim
     */
    async createClaim(requestParameters: ClaimsApiCreateClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Claim> {
        const response = await this.createClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a claim by ID
     * Delete a Claim
     */
    async deleteClaimRaw(requestParameters: ClaimsApiDeleteClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling deleteClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a claim by ID
     * Delete a Claim
     */
    async deleteClaim(requestParameters: ClaimsApiDeleteClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClaimRaw(requestParameters, initOverrides);
    }

    /**
     * Get a claim by ID
     * Get a Claim
     */
    async getClaimRaw(requestParameters: ClaimsApiGetClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Claim>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling getClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimFromJSON(jsonValue));
    }

    /**
     * Get a claim by ID
     * Get a Claim
     */
    async getClaim(requestParameters: ClaimsApiGetClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Claim> {
        const response = await this.getClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all email summaries associated with a specific claim
     * Get Email Summaries for a Claim
     */
    async getClaimEmailSummariesRaw(requestParameters: ClaimsApiGetClaimEmailSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailSummaries200Response>> {
        if (requestParameters['claimID'] == null) {
            throw new runtime.RequiredError(
                'claimID',
                'Required parameter "claimID" was null or undefined when calling getClaimEmailSummaries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claimID}/email-summaries`.replace(`{${"claimID"}}`, encodeURIComponent(String(requestParameters['claimID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmailSummaries200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all email summaries associated with a specific claim
     * Get Email Summaries for a Claim
     */
    async getClaimEmailSummaries(requestParameters: ClaimsApiGetClaimEmailSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailSummaries200Response> {
        const response = await this.getClaimEmailSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all claims with optional filtering
     * Get Claims
     */
    async getClaimsRaw(requestParameters: ClaimsApiGetClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClaims200Response>> {
        const queryParameters: any = {};

        if (requestParameters['brokerClaimReference'] != null) {
            queryParameters['broker_claim_reference'] = requestParameters['brokerClaimReference'];
        }

        if (requestParameters['brokerPolicyReference'] != null) {
            queryParameters['broker_policy_reference'] = requestParameters['brokerPolicyReference'];
        }

        if (requestParameters['policyId'] != null) {
            queryParameters['policy_id'] = requestParameters['policyId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['participation'] != null) {
            queryParameters['participation'] = requestParameters['participation'];
        }

        if (requestParameters['classOfBusiness'] != null) {
            queryParameters['class_of_business'] = requestParameters['classOfBusiness'];
        }

        if (requestParameters['riskCode'] != null) {
            queryParameters['risk_code'] = requestParameters['riskCode'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClaims200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all claims with optional filtering
     * Get Claims
     */
    async getClaims(requestParameters: ClaimsApiGetClaimsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClaims200Response> {
        const response = await this.getClaimsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update a claim by ID - only updates provided fields
     * Partially Update a Claim
     */
    async patchClaimRaw(requestParameters: ClaimsApiPatchClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Claim>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling patchClaim().'
            );
        }

        if (requestParameters['claimPatch'] == null) {
            throw new runtime.RequiredError(
                'claimPatch',
                'Required parameter "claimPatch" was null or undefined when calling patchClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimPatchToJSON(requestParameters['claimPatch']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimFromJSON(jsonValue));
    }

    /**
     * Partially update a claim by ID - only updates provided fields
     * Partially Update a Claim
     */
    async patchClaim(requestParameters: ClaimsApiPatchClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Claim> {
        const response = await this.patchClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the association between an email summary and a claim
     * Remove Email Summary from Claim
     */
    async removeEmailSummaryFromClaimRaw(requestParameters: ClaimsApiRemoveEmailSummaryFromClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['claimID'] == null) {
            throw new runtime.RequiredError(
                'claimID',
                'Required parameter "claimID" was null or undefined when calling removeEmailSummaryFromClaim().'
            );
        }

        if (requestParameters['summaryID'] == null) {
            throw new runtime.RequiredError(
                'summaryID',
                'Required parameter "summaryID" was null or undefined when calling removeEmailSummaryFromClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claimID}/email-summaries/{summaryID}`.replace(`{${"claimID"}}`, encodeURIComponent(String(requestParameters['claimID']))).replace(`{${"summaryID"}}`, encodeURIComponent(String(requestParameters['summaryID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the association between an email summary and a claim
     * Remove Email Summary from Claim
     */
    async removeEmailSummaryFromClaim(requestParameters: ClaimsApiRemoveEmailSummaryFromClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeEmailSummaryFromClaimRaw(requestParameters, initOverrides);
    }

    /**
     * Update a claim by ID
     * Update a Claim
     */
    async updateClaimRaw(requestParameters: ClaimsApiUpdateClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling updateClaim().'
            );
        }

        if (requestParameters['claimUpdate'] == null) {
            throw new runtime.RequiredError(
                'claimUpdate',
                'Required parameter "claimUpdate" was null or undefined when calling updateClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimUpdateToJSON(requestParameters['claimUpdate']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a claim by ID
     * Update a Claim
     */
    async updateClaim(requestParameters: ClaimsApiUpdateClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateClaimRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum = {
    Tpa: 'tpa',
    Adjuster: 'adjuster',
    Lawyer: 'lawyer'
} as const;
export type ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum = typeof ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum[keyof typeof ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum];
/**
 * @export
 */
export const GetClaimsStatusEnum = {
    Open: 'Open',
    Closed: 'Closed',
    Reopened: 'Reopened'
} as const;
export type GetClaimsStatusEnum = typeof GetClaimsStatusEnum[keyof typeof GetClaimsStatusEnum];
