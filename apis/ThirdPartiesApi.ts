/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimsClaimIdThirdPartyEntitiesGet200Response,
  ThirdPartyEntitiesGet200Response,
  ThirdPartyEntity,
  ThirdPartyEntityCreate,
  ThirdPartyEntityUpdate,
} from '../models/index';
import {
    ClaimsClaimIdThirdPartyEntitiesGet200ResponseFromJSON,
    ClaimsClaimIdThirdPartyEntitiesGet200ResponseToJSON,
    ThirdPartyEntitiesGet200ResponseFromJSON,
    ThirdPartyEntitiesGet200ResponseToJSON,
    ThirdPartyEntityFromJSON,
    ThirdPartyEntityToJSON,
    ThirdPartyEntityCreateFromJSON,
    ThirdPartyEntityCreateToJSON,
    ThirdPartyEntityUpdateFromJSON,
    ThirdPartyEntityUpdateToJSON,
} from '../models/index';

export interface ThirdPartiesApiClaimsClaimIdThirdPartyEntitiesGetRequest {
    claimId: string;
    entityType?: ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface ThirdPartiesApiThirdPartyEntitiesGetRequest {
    claimId?: string;
    entityType?: ThirdPartyEntitiesGetEntityTypeEnum;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface ThirdPartiesApiThirdPartyEntitiesIdDeleteRequest {
    id: string;
}

export interface ThirdPartiesApiThirdPartyEntitiesIdGetRequest {
    id: string;
}

export interface ThirdPartiesApiThirdPartyEntitiesIdPatchRequest {
    id: string;
    thirdPartyEntityUpdate: ThirdPartyEntityUpdate;
}

export interface ThirdPartiesApiThirdPartyEntitiesIdPutRequest {
    id: string;
    thirdPartyEntityUpdate: ThirdPartyEntityUpdate;
}

export interface ThirdPartiesApiThirdPartyEntitiesPostRequest {
    thirdPartyEntityCreate: ThirdPartyEntityCreate;
}

/**
 * 
 */
export class ThirdPartiesApi extends runtime.BaseAPI {

    /**
     * Retrieve all third parties associated with a specific claim
     * Get Third Parties
     */
    async claimsClaimIdThirdPartyEntitiesGetRaw(requestParameters: ThirdPartiesApiClaimsClaimIdThirdPartyEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimsClaimIdThirdPartyEntitiesGet200Response>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling claimsClaimIdThirdPartyEntitiesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['entityType'] != null) {
            queryParameters['entity_type'] = requestParameters['entityType'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/third-party-entities`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimsClaimIdThirdPartyEntitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all third parties associated with a specific claim
     * Get Third Parties
     */
    async claimsClaimIdThirdPartyEntitiesGet(requestParameters: ThirdPartiesApiClaimsClaimIdThirdPartyEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimsClaimIdThirdPartyEntitiesGet200Response> {
        const response = await this.claimsClaimIdThirdPartyEntitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of third parties with optional filtering
     * List all Third Parties
     */
    async thirdPartyEntitiesGetRaw(requestParameters: ThirdPartiesApiThirdPartyEntitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThirdPartyEntitiesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['claimId'] != null) {
            queryParameters['claim_id'] = requestParameters['claimId'];
        }

        if (requestParameters['entityType'] != null) {
            queryParameters['entity_type'] = requestParameters['entityType'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/third-party-entities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThirdPartyEntitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of third parties with optional filtering
     * List all Third Parties
     */
    async thirdPartyEntitiesGet(requestParameters: ThirdPartiesApiThirdPartyEntitiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThirdPartyEntitiesGet200Response> {
        const response = await this.thirdPartyEntitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing third party
     * Delete a Third Party
     */
    async thirdPartyEntitiesIdDeleteRaw(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling thirdPartyEntitiesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/third-party-entities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing third party
     * Delete a Third Party
     */
    async thirdPartyEntitiesIdDelete(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.thirdPartyEntitiesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a specific third party by its ID
     * Get a Third Party
     */
    async thirdPartyEntitiesIdGetRaw(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThirdPartyEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling thirdPartyEntitiesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/third-party-entities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThirdPartyEntityFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific third party by its ID
     * Get a Third Party
     */
    async thirdPartyEntitiesIdGet(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThirdPartyEntity> {
        const response = await this.thirdPartyEntitiesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an existing third party
     * Partially Update a Third Party
     */
    async thirdPartyEntitiesIdPatchRaw(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThirdPartyEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling thirdPartyEntitiesIdPatch().'
            );
        }

        if (requestParameters['thirdPartyEntityUpdate'] == null) {
            throw new runtime.RequiredError(
                'thirdPartyEntityUpdate',
                'Required parameter "thirdPartyEntityUpdate" was null or undefined when calling thirdPartyEntitiesIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/third-party-entities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ThirdPartyEntityUpdateToJSON(requestParameters['thirdPartyEntityUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThirdPartyEntityFromJSON(jsonValue));
    }

    /**
     * Partially update an existing third party
     * Partially Update a Third Party
     */
    async thirdPartyEntitiesIdPatch(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThirdPartyEntity> {
        const response = await this.thirdPartyEntitiesIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing third party
     * Update a Third Party
     */
    async thirdPartyEntitiesIdPutRaw(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThirdPartyEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling thirdPartyEntitiesIdPut().'
            );
        }

        if (requestParameters['thirdPartyEntityUpdate'] == null) {
            throw new runtime.RequiredError(
                'thirdPartyEntityUpdate',
                'Required parameter "thirdPartyEntityUpdate" was null or undefined when calling thirdPartyEntitiesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/third-party-entities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThirdPartyEntityUpdateToJSON(requestParameters['thirdPartyEntityUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThirdPartyEntityFromJSON(jsonValue));
    }

    /**
     * Update an existing third party
     * Update a Third Party
     */
    async thirdPartyEntitiesIdPut(requestParameters: ThirdPartiesApiThirdPartyEntitiesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThirdPartyEntity> {
        const response = await this.thirdPartyEntitiesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new third party for a claim
     * Create a Third Party
     */
    async thirdPartyEntitiesPostRaw(requestParameters: ThirdPartiesApiThirdPartyEntitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThirdPartyEntity>> {
        if (requestParameters['thirdPartyEntityCreate'] == null) {
            throw new runtime.RequiredError(
                'thirdPartyEntityCreate',
                'Required parameter "thirdPartyEntityCreate" was null or undefined when calling thirdPartyEntitiesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/third-party-entities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThirdPartyEntityCreateToJSON(requestParameters['thirdPartyEntityCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThirdPartyEntityFromJSON(jsonValue));
    }

    /**
     * Create a new third party for a claim
     * Create a Third Party
     */
    async thirdPartyEntitiesPost(requestParameters: ThirdPartiesApiThirdPartyEntitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThirdPartyEntity> {
        const response = await this.thirdPartyEntitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum = {
    Tpa: 'tpa',
    Adjuster: 'adjuster',
    Lawyer: 'lawyer'
} as const;
export type ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum = typeof ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum[keyof typeof ClaimsClaimIdThirdPartyEntitiesGetEntityTypeEnum];
/**
 * @export
 */
export const ThirdPartyEntitiesGetEntityTypeEnum = {
    Tpa: 'tpa',
    Adjuster: 'adjuster',
    Lawyer: 'lawyer'
} as const;
export type ThirdPartyEntitiesGetEntityTypeEnum = typeof ThirdPartyEntitiesGetEntityTypeEnum[keyof typeof ThirdPartyEntitiesGetEntityTypeEnum];
