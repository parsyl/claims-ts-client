/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimTransactionContractMarket,
  ClaimTransactionContractMarketCreate,
  ClaimTransactionContractMarketUpdate,
  ClaimTransactionInsurer,
  GetAllContractMarkets200Response,
} from '../models/index';
import {
    ClaimTransactionContractMarketFromJSON,
    ClaimTransactionContractMarketToJSON,
    ClaimTransactionContractMarketCreateFromJSON,
    ClaimTransactionContractMarketCreateToJSON,
    ClaimTransactionContractMarketUpdateFromJSON,
    ClaimTransactionContractMarketUpdateToJSON,
    ClaimTransactionInsurerFromJSON,
    ClaimTransactionInsurerToJSON,
    GetAllContractMarkets200ResponseFromJSON,
    GetAllContractMarkets200ResponseToJSON,
} from '../models/index';

export interface TransactionContractMarketsApiCreateTransactionContractMarketRequest {
    transactionID: string;
    claimTransactionContractMarketCreate: ClaimTransactionContractMarketCreate;
}

export interface TransactionContractMarketsApiDeleteContractMarketRequest {
    id: string;
}

export interface TransactionContractMarketsApiGetAllContractMarketsRequest {
    agency?: string;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface TransactionContractMarketsApiGetContractMarketRequest {
    id: string;
}

export interface TransactionContractMarketsApiGetContractMarketInsurersRequest {
    marketID: string;
}

export interface TransactionContractMarketsApiGetTransactionContractMarketsRequest {
    transactionID: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface TransactionContractMarketsApiUpdateContractMarketRequest {
    id: string;
    claimTransactionContractMarketUpdate: ClaimTransactionContractMarketUpdate;
}

/**
 * 
 */
export class TransactionContractMarketsApi extends runtime.BaseAPI {

    /**
     * Create a new contract market for a transaction
     * Create a Contract Market
     */
    async createTransactionContractMarketRaw(requestParameters: TransactionContractMarketsApiCreateTransactionContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionContractMarket>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling createTransactionContractMarket().'
            );
        }

        if (requestParameters['claimTransactionContractMarketCreate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionContractMarketCreate',
                'Required parameter "claimTransactionContractMarketCreate" was null or undefined when calling createTransactionContractMarket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/contract-markets`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionContractMarketCreateToJSON(requestParameters['claimTransactionContractMarketCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionContractMarketFromJSON(jsonValue));
    }

    /**
     * Create a new contract market for a transaction
     * Create a Contract Market
     */
    async createTransactionContractMarket(requestParameters: TransactionContractMarketsApiCreateTransactionContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionContractMarket> {
        const response = await this.createTransactionContractMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a contract market
     * Delete a Contract Market
     */
    async deleteContractMarketRaw(requestParameters: TransactionContractMarketsApiDeleteContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteContractMarket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/contract-markets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a contract market
     * Delete a Contract Market
     */
    async deleteContractMarket(requestParameters: TransactionContractMarketsApiDeleteContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContractMarketRaw(requestParameters, initOverrides);
    }

    /**
     * Get all contract markets with optional filters
     * List all Contract Markets
     */
    async getAllContractMarketsRaw(requestParameters: TransactionContractMarketsApiGetAllContractMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllContractMarkets200Response>> {
        const queryParameters: any = {};

        if (requestParameters['agency'] != null) {
            queryParameters['agency'] = requestParameters['agency'];
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = (requestParameters['createdAfter'] as any).toISOString();
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = (requestParameters['createdBefore'] as any).toISOString();
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/contract-markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllContractMarkets200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all contract markets with optional filters
     * List all Contract Markets
     */
    async getAllContractMarkets(requestParameters: TransactionContractMarketsApiGetAllContractMarketsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllContractMarkets200Response> {
        const response = await this.getAllContractMarketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific contract market by ID
     * Get a Contract Market
     */
    async getContractMarketRaw(requestParameters: TransactionContractMarketsApiGetContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionContractMarket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getContractMarket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/contract-markets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionContractMarketFromJSON(jsonValue));
    }

    /**
     * Get a specific contract market by ID
     * Get a Contract Market
     */
    async getContractMarket(requestParameters: TransactionContractMarketsApiGetContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionContractMarket> {
        const response = await this.getContractMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all insurers for a specific contract market
     * Get Contract Market Insurers
     */
    async getContractMarketInsurersRaw(requestParameters: TransactionContractMarketsApiGetContractMarketInsurersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClaimTransactionInsurer>>> {
        if (requestParameters['marketID'] == null) {
            throw new runtime.RequiredError(
                'marketID',
                'Required parameter "marketID" was null or undefined when calling getContractMarketInsurers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/contract-markets/{marketID}/insurers`.replace(`{${"marketID"}}`, encodeURIComponent(String(requestParameters['marketID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClaimTransactionInsurerFromJSON));
    }

    /**
     * Get all insurers for a specific contract market
     * Get Contract Market Insurers
     */
    async getContractMarketInsurers(requestParameters: TransactionContractMarketsApiGetContractMarketInsurersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClaimTransactionInsurer>> {
        const response = await this.getContractMarketInsurersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all contract markets for a specific transaction
     * Get Contract Markets
     */
    async getTransactionContractMarketsRaw(requestParameters: TransactionContractMarketsApiGetTransactionContractMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllContractMarkets200Response>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling getTransactionContractMarkets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/contract-markets`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllContractMarkets200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all contract markets for a specific transaction
     * Get Contract Markets
     */
    async getTransactionContractMarkets(requestParameters: TransactionContractMarketsApiGetTransactionContractMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllContractMarkets200Response> {
        const response = await this.getTransactionContractMarketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing contract market
     * Update a Contract Market
     */
    async updateContractMarketRaw(requestParameters: TransactionContractMarketsApiUpdateContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionContractMarket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateContractMarket().'
            );
        }

        if (requestParameters['claimTransactionContractMarketUpdate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionContractMarketUpdate',
                'Required parameter "claimTransactionContractMarketUpdate" was null or undefined when calling updateContractMarket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/contract-markets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionContractMarketUpdateToJSON(requestParameters['claimTransactionContractMarketUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionContractMarketFromJSON(jsonValue));
    }

    /**
     * Update an existing contract market
     * Update a Contract Market
     */
    async updateContractMarket(requestParameters: TransactionContractMarketsApiUpdateContractMarketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionContractMarket> {
        const response = await this.updateContractMarketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
