/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimDocument,
  ClaimDocumentCreate,
  ClaimDocumentPatch,
  GetTransactionDocuments200Response,
  ValidationErrors,
} from '../models/index';
import {
    ClaimDocumentFromJSON,
    ClaimDocumentToJSON,
    ClaimDocumentCreateFromJSON,
    ClaimDocumentCreateToJSON,
    ClaimDocumentPatchFromJSON,
    ClaimDocumentPatchToJSON,
    GetTransactionDocuments200ResponseFromJSON,
    GetTransactionDocuments200ResponseToJSON,
    ValidationErrorsFromJSON,
    ValidationErrorsToJSON,
} from '../models/index';

export interface DocumentsApiCreateClaimDocumentRequest {
    claimId: string;
    claimDocumentCreate: ClaimDocumentCreate;
}

export interface DocumentsApiDeleteClaimDocumentRequest {
    id: string;
}

export interface DocumentsApiGetAllClaimDocumentsRequest {
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
    documentType?: string;
    documentSource?: string;
    fileName?: string;
    contentType?: string;
    transactionId?: string;
    includeExternalRefs?: boolean;
}

export interface DocumentsApiGetClaimDocumentRequest {
    id: string;
    includeExternalRefs?: boolean;
}

export interface DocumentsApiGetClaimDocumentsRequest {
    claimId: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
    documentType?: string;
    documentSource?: string;
    fileName?: string;
    contentType?: string;
    includeExternalRefs?: boolean;
}

export interface DocumentsApiGetTransactionDocumentsRequest {
    transactionID: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
    documentType?: GetTransactionDocumentsDocumentTypeEnum;
    documentSource?: GetTransactionDocumentsDocumentSourceEnum;
}

export interface DocumentsApiPatchClaimDocumentRequest {
    id: string;
    claimDocumentPatch: ClaimDocumentPatch;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * Create a new document for a claim
     * Create a Document
     */
    async createClaimDocumentRaw(requestParameters: DocumentsApiCreateClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimDocument>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling createClaimDocument().'
            );
        }

        if (requestParameters['claimDocumentCreate'] == null) {
            throw new runtime.RequiredError(
                'claimDocumentCreate',
                'Required parameter "claimDocumentCreate" was null or undefined when calling createClaimDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/documents`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimDocumentCreateToJSON(requestParameters['claimDocumentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimDocumentFromJSON(jsonValue));
    }

    /**
     * Create a new document for a claim
     * Create a Document
     */
    async createClaimDocument(requestParameters: DocumentsApiCreateClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimDocument> {
        const response = await this.createClaimDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a claim document by ID
     * Delete a Document
     */
    async deleteClaimDocumentRaw(requestParameters: DocumentsApiDeleteClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteClaimDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a claim document by ID
     * Delete a Document
     */
    async deleteClaimDocument(requestParameters: DocumentsApiDeleteClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClaimDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * Get all documents across all claims with optional filtering
     * List all Documents
     */
    async getAllClaimDocumentsRaw(requestParameters: DocumentsApiGetAllClaimDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionDocuments200Response>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['documentType'] != null) {
            queryParameters['document_type'] = requestParameters['documentType'];
        }

        if (requestParameters['documentSource'] != null) {
            queryParameters['document_source'] = requestParameters['documentSource'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['transactionId'] != null) {
            queryParameters['transaction_id'] = requestParameters['transactionId'];
        }

        if (requestParameters['includeExternalRefs'] != null) {
            queryParameters['include_external_refs'] = requestParameters['includeExternalRefs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionDocuments200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all documents across all claims with optional filtering
     * List all Documents
     */
    async getAllClaimDocuments(requestParameters: DocumentsApiGetAllClaimDocumentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionDocuments200Response> {
        const response = await this.getAllClaimDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific claim document by ID
     * Get a Document
     */
    async getClaimDocumentRaw(requestParameters: DocumentsApiGetClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimDocument>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getClaimDocument().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeExternalRefs'] != null) {
            queryParameters['include_external_refs'] = requestParameters['includeExternalRefs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimDocumentFromJSON(jsonValue));
    }

    /**
     * Get a specific claim document by ID
     * Get a Document
     */
    async getClaimDocument(requestParameters: DocumentsApiGetClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimDocument> {
        const response = await this.getClaimDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all documents for a specific claim
     * Get Documents
     */
    async getClaimDocumentsRaw(requestParameters: DocumentsApiGetClaimDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionDocuments200Response>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling getClaimDocuments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['documentType'] != null) {
            queryParameters['document_type'] = requestParameters['documentType'];
        }

        if (requestParameters['documentSource'] != null) {
            queryParameters['document_source'] = requestParameters['documentSource'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['includeExternalRefs'] != null) {
            queryParameters['include_external_refs'] = requestParameters['includeExternalRefs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/documents`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionDocuments200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all documents for a specific claim
     * Get Documents
     */
    async getClaimDocuments(requestParameters: DocumentsApiGetClaimDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionDocuments200Response> {
        const response = await this.getClaimDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all documents linked to a specific transaction via external references
     * Get Transaction Documents
     */
    async getTransactionDocumentsRaw(requestParameters: DocumentsApiGetTransactionDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionDocuments200Response>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling getTransactionDocuments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['documentType'] != null) {
            queryParameters['document_type'] = requestParameters['documentType'];
        }

        if (requestParameters['documentSource'] != null) {
            queryParameters['document_source'] = requestParameters['documentSource'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/documents`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionDocuments200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all documents linked to a specific transaction via external references
     * Get Transaction Documents
     */
    async getTransactionDocuments(requestParameters: DocumentsApiGetTransactionDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionDocuments200Response> {
        const response = await this.getTransactionDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update a claim document by ID
     * Update a Document
     */
    async patchClaimDocumentRaw(requestParameters: DocumentsApiPatchClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimDocument>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchClaimDocument().'
            );
        }

        if (requestParameters['claimDocumentPatch'] == null) {
            throw new runtime.RequiredError(
                'claimDocumentPatch',
                'Required parameter "claimDocumentPatch" was null or undefined when calling patchClaimDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimDocumentPatchToJSON(requestParameters['claimDocumentPatch']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimDocumentFromJSON(jsonValue));
    }

    /**
     * Partially update a claim document by ID
     * Update a Document
     */
    async patchClaimDocument(requestParameters: DocumentsApiPatchClaimDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimDocument> {
        const response = await this.patchClaimDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTransactionDocumentsDocumentTypeEnum = {
    Policy: 'policy',
    Claim: 'claim',
    ProofOfLoss: 'proof_of_loss',
    Correspondence: 'correspondence',
    Invoice: 'invoice',
    Receipt: 'receipt',
    Photo: 'photo',
    Other: 'other'
} as const;
export type GetTransactionDocumentsDocumentTypeEnum = typeof GetTransactionDocumentsDocumentTypeEnum[keyof typeof GetTransactionDocumentsDocumentTypeEnum];
/**
 * @export
 */
export const GetTransactionDocumentsDocumentSourceEnum = {
    Parsyl: 'parsyl',
    Imr: 'imr'
} as const;
export type GetTransactionDocumentsDocumentSourceEnum = typeof GetTransactionDocumentsDocumentSourceEnum[keyof typeof GetTransactionDocumentsDocumentSourceEnum];
