/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimTransactionFinancial,
  ClaimTransactionFinancialCreate,
  ClaimTransactionFinancialUpdate,
  GetFinancialAmountItems200Response,
  ListAllTransactionFinancials200Response,
} from '../models/index';
import {
    ClaimTransactionFinancialFromJSON,
    ClaimTransactionFinancialToJSON,
    ClaimTransactionFinancialCreateFromJSON,
    ClaimTransactionFinancialCreateToJSON,
    ClaimTransactionFinancialUpdateFromJSON,
    ClaimTransactionFinancialUpdateToJSON,
    GetFinancialAmountItems200ResponseFromJSON,
    GetFinancialAmountItems200ResponseToJSON,
    ListAllTransactionFinancials200ResponseFromJSON,
    ListAllTransactionFinancials200ResponseToJSON,
} from '../models/index';

export interface TransactionFinancialsApiCreateTransactionFinancialRequest {
    transactionID: string;
    claimTransactionFinancialCreate: ClaimTransactionFinancialCreate;
}

export interface TransactionFinancialsApiDeleteTransactionFinancialRequest {
    id: string;
}

export interface TransactionFinancialsApiGetFinancialAmountItemsRequest {
    financialID: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface TransactionFinancialsApiGetTransactionFinancialRequest {
    id: string;
}

export interface TransactionFinancialsApiGetTransactionFinancialsRequest {
    transactionID: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
    includeAmountItems?: boolean;
}

export interface TransactionFinancialsApiListAllTransactionFinancialsRequest {
    currency?: string;
    targetCurrency?: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
    includeAmountItems?: boolean;
}

export interface TransactionFinancialsApiUpdateTransactionFinancialRequest {
    id: string;
    claimTransactionFinancialUpdate: ClaimTransactionFinancialUpdate;
}

/**
 * 
 */
export class TransactionFinancialsApi extends runtime.BaseAPI {

    /**
     * Create a new financial record for a transaction
     * Create a Financial
     */
    async createTransactionFinancialRaw(requestParameters: TransactionFinancialsApiCreateTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionFinancial>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling createTransactionFinancial().'
            );
        }

        if (requestParameters['claimTransactionFinancialCreate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionFinancialCreate',
                'Required parameter "claimTransactionFinancialCreate" was null or undefined when calling createTransactionFinancial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/financials`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionFinancialCreateToJSON(requestParameters['claimTransactionFinancialCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionFinancialFromJSON(jsonValue));
    }

    /**
     * Create a new financial record for a transaction
     * Create a Financial
     */
    async createTransactionFinancial(requestParameters: TransactionFinancialsApiCreateTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionFinancial> {
        const response = await this.createTransactionFinancialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a financial record and its amount items
     * Delete a Financial
     */
    async deleteTransactionFinancialRaw(requestParameters: TransactionFinancialsApiDeleteTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTransactionFinancial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/financials/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a financial record and its amount items
     * Delete a Financial
     */
    async deleteTransactionFinancial(requestParameters: TransactionFinancialsApiDeleteTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransactionFinancialRaw(requestParameters, initOverrides);
    }

    /**
     * Get all amount items for a specific financial record
     * Get Financial Amount Items
     */
    async getFinancialAmountItemsRaw(requestParameters: TransactionFinancialsApiGetFinancialAmountItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFinancialAmountItems200Response>> {
        if (requestParameters['financialID'] == null) {
            throw new runtime.RequiredError(
                'financialID',
                'Required parameter "financialID" was null or undefined when calling getFinancialAmountItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/financials/{financialID}/amount-items`.replace(`{${"financialID"}}`, encodeURIComponent(String(requestParameters['financialID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFinancialAmountItems200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all amount items for a specific financial record
     * Get Financial Amount Items
     */
    async getFinancialAmountItems(requestParameters: TransactionFinancialsApiGetFinancialAmountItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFinancialAmountItems200Response> {
        const response = await this.getFinancialAmountItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single financial record by ID
     * Get a Financial
     */
    async getTransactionFinancialRaw(requestParameters: TransactionFinancialsApiGetTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionFinancial>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTransactionFinancial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/financials/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionFinancialFromJSON(jsonValue));
    }

    /**
     * Get a single financial record by ID
     * Get a Financial
     */
    async getTransactionFinancial(requestParameters: TransactionFinancialsApiGetTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionFinancial> {
        const response = await this.getTransactionFinancialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all financial records for a specific transaction
     * Get Financials
     */
    async getTransactionFinancialsRaw(requestParameters: TransactionFinancialsApiGetTransactionFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAllTransactionFinancials200Response>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling getTransactionFinancials().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['includeAmountItems'] != null) {
            queryParameters['include_amount_items'] = requestParameters['includeAmountItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/financials`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAllTransactionFinancials200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all financial records for a specific transaction
     * Get Financials
     */
    async getTransactionFinancials(requestParameters: TransactionFinancialsApiGetTransactionFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAllTransactionFinancials200Response> {
        const response = await this.getTransactionFinancialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all financial records across all transactions with optional filters
     * List all Financials
     */
    async listAllTransactionFinancialsRaw(requestParameters: TransactionFinancialsApiListAllTransactionFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAllTransactionFinancials200Response>> {
        const queryParameters: any = {};

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['targetCurrency'] != null) {
            queryParameters['target_currency'] = requestParameters['targetCurrency'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['includeAmountItems'] != null) {
            queryParameters['include_amount_items'] = requestParameters['includeAmountItems'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/financials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAllTransactionFinancials200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all financial records across all transactions with optional filters
     * List all Financials
     */
    async listAllTransactionFinancials(requestParameters: TransactionFinancialsApiListAllTransactionFinancialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAllTransactionFinancials200Response> {
        const response = await this.listAllTransactionFinancialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing financial record
     * Update a Financial
     */
    async updateTransactionFinancialRaw(requestParameters: TransactionFinancialsApiUpdateTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionFinancial>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTransactionFinancial().'
            );
        }

        if (requestParameters['claimTransactionFinancialUpdate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionFinancialUpdate',
                'Required parameter "claimTransactionFinancialUpdate" was null or undefined when calling updateTransactionFinancial().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/financials/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionFinancialUpdateToJSON(requestParameters['claimTransactionFinancialUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionFinancialFromJSON(jsonValue));
    }

    /**
     * Update an existing financial record
     * Update a Financial
     */
    async updateTransactionFinancial(requestParameters: TransactionFinancialsApiUpdateTransactionFinancialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionFinancial> {
        const response = await this.updateTransactionFinancialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
