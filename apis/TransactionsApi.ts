/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimTransaction,
  ClaimTransactionCreate,
  ClaimTransactionUpdate,
  GetClaimTransactions200Response,
  ValidationErrors,
} from '../models/index';
import {
    ClaimTransactionFromJSON,
    ClaimTransactionToJSON,
    ClaimTransactionCreateFromJSON,
    ClaimTransactionCreateToJSON,
    ClaimTransactionUpdateFromJSON,
    ClaimTransactionUpdateToJSON,
    GetClaimTransactions200ResponseFromJSON,
    GetClaimTransactions200ResponseToJSON,
    ValidationErrorsFromJSON,
    ValidationErrorsToJSON,
} from '../models/index';

export interface TransactionsApiCreateClaimTransactionRequest {
    claimId: string;
    claimTransactionCreate: ClaimTransactionCreate;
}

export interface TransactionsApiDeleteClaimTransactionRequest {
    id: string;
}

export interface TransactionsApiGetClaimTransactionRequest {
    id: string;
}

export interface TransactionsApiGetClaimTransactionsRequest {
    claimId: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
    ucr?: string;
    umr?: string;
    transactionReference?: string;
    transactionError?: boolean;
    transactionSequence?: string;
    includeParties?: boolean;
    includeFinancials?: boolean;
    includeErrors?: boolean;
    claimStatus?: string;
    claimType?: string;
    claimsScheme?: string;
    triageCategory?: string;
    parallelUcr?: string;
    leadClaimReference?: string;
    brokerClaimReference1?: string;
}

export interface TransactionsApiUpdateClaimTransactionRequest {
    id: string;
    claimTransactionUpdate: ClaimTransactionUpdate;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Create a new transaction for a claim
     * Create a Transaction
     */
    async createClaimTransactionRaw(requestParameters: TransactionsApiCreateClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransaction>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling createClaimTransaction().'
            );
        }

        if (requestParameters['claimTransactionCreate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionCreate',
                'Required parameter "claimTransactionCreate" was null or undefined when calling createClaimTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/transactions`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionCreateToJSON(requestParameters['claimTransactionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionFromJSON(jsonValue));
    }

    /**
     * Create a new transaction for a claim
     * Create a Transaction
     */
    async createClaimTransaction(requestParameters: TransactionsApiCreateClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransaction> {
        const response = await this.createClaimTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a claim transaction by ID
     * Delete a Transaction
     */
    async deleteClaimTransactionRaw(requestParameters: TransactionsApiDeleteClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteClaimTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a claim transaction by ID
     * Delete a Transaction
     */
    async deleteClaimTransaction(requestParameters: TransactionsApiDeleteClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClaimTransactionRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific claim transaction by ID
     * Get a Transaction
     */
    async getClaimTransactionRaw(requestParameters: TransactionsApiGetClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransaction>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getClaimTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionFromJSON(jsonValue));
    }

    /**
     * Get a specific claim transaction by ID
     * Get a Transaction
     */
    async getClaimTransaction(requestParameters: TransactionsApiGetClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransaction> {
        const response = await this.getClaimTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all transactions for a specific claim
     * Get Transactions
     */
    async getClaimTransactionsRaw(requestParameters: TransactionsApiGetClaimTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClaimTransactions200Response>> {
        if (requestParameters['claimId'] == null) {
            throw new runtime.RequiredError(
                'claimId',
                'Required parameter "claimId" was null or undefined when calling getClaimTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        if (requestParameters['ucr'] != null) {
            queryParameters['ucr'] = requestParameters['ucr'];
        }

        if (requestParameters['umr'] != null) {
            queryParameters['umr'] = requestParameters['umr'];
        }

        if (requestParameters['transactionReference'] != null) {
            queryParameters['transaction_reference'] = requestParameters['transactionReference'];
        }

        if (requestParameters['transactionError'] != null) {
            queryParameters['transaction_error'] = requestParameters['transactionError'];
        }

        if (requestParameters['transactionSequence'] != null) {
            queryParameters['transaction_sequence'] = requestParameters['transactionSequence'];
        }

        if (requestParameters['includeParties'] != null) {
            queryParameters['include_parties'] = requestParameters['includeParties'];
        }

        if (requestParameters['includeFinancials'] != null) {
            queryParameters['include_financials'] = requestParameters['includeFinancials'];
        }

        if (requestParameters['includeErrors'] != null) {
            queryParameters['include_errors'] = requestParameters['includeErrors'];
        }

        if (requestParameters['claimStatus'] != null) {
            queryParameters['claim_status'] = requestParameters['claimStatus'];
        }

        if (requestParameters['claimType'] != null) {
            queryParameters['claim_type'] = requestParameters['claimType'];
        }

        if (requestParameters['claimsScheme'] != null) {
            queryParameters['claims_scheme'] = requestParameters['claimsScheme'];
        }

        if (requestParameters['triageCategory'] != null) {
            queryParameters['triage_category'] = requestParameters['triageCategory'];
        }

        if (requestParameters['parallelUcr'] != null) {
            queryParameters['parallel_ucr'] = requestParameters['parallelUcr'];
        }

        if (requestParameters['leadClaimReference'] != null) {
            queryParameters['lead_claim_reference'] = requestParameters['leadClaimReference'];
        }

        if (requestParameters['brokerClaimReference1'] != null) {
            queryParameters['broker_claim_reference1'] = requestParameters['brokerClaimReference1'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claim_id}/transactions`.replace(`{${"claim_id"}}`, encodeURIComponent(String(requestParameters['claimId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClaimTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all transactions for a specific claim
     * Get Transactions
     */
    async getClaimTransactions(requestParameters: TransactionsApiGetClaimTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClaimTransactions200Response> {
        const response = await this.getClaimTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a claim transaction by ID
     * Update a Transaction
     */
    async updateClaimTransactionRaw(requestParameters: TransactionsApiUpdateClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateClaimTransaction().'
            );
        }

        if (requestParameters['claimTransactionUpdate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionUpdate',
                'Required parameter "claimTransactionUpdate" was null or undefined when calling updateClaimTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionUpdateToJSON(requestParameters['claimTransactionUpdate']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a claim transaction by ID
     * Update a Transaction
     */
    async updateClaimTransaction(requestParameters: TransactionsApiUpdateClaimTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateClaimTransactionRaw(requestParameters, initOverrides);
    }

}
