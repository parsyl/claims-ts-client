/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimTransactionComment,
  ClaimTransactionCommentCreate,
  GetAllTransactionComments200Response,
} from '../models/index';
import {
    ClaimTransactionCommentFromJSON,
    ClaimTransactionCommentToJSON,
    ClaimTransactionCommentCreateFromJSON,
    ClaimTransactionCommentCreateToJSON,
    GetAllTransactionComments200ResponseFromJSON,
    GetAllTransactionComments200ResponseToJSON,
} from '../models/index';

export interface TransactionCommentsApiCreateTransactionCommentRequest {
    transactionID: string;
    claimTransactionCommentCreate: ClaimTransactionCommentCreate;
}

export interface TransactionCommentsApiDeleteTransactionCommentRequest {
    id: string;
}

export interface TransactionCommentsApiGetAllTransactionCommentsRequest {
    commentType?: GetAllTransactionCommentsCommentTypeEnum;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface TransactionCommentsApiGetTransactionCommentRequest {
    id: string;
}

export interface TransactionCommentsApiGetTransactionCommentsRequest {
    transactionID: string;
    commentType?: GetTransactionCommentsCommentTypeEnum;
    createdAfter?: Date;
    createdBefore?: Date;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface TransactionCommentsApiUpdateTransactionCommentRequest {
    id: string;
    claimTransactionCommentCreate: ClaimTransactionCommentCreate;
}

/**
 * 
 */
export class TransactionCommentsApi extends runtime.BaseAPI {

    /**
     * Create a new comment for a transaction
     * Create a Comment
     */
    async createTransactionCommentRaw(requestParameters: TransactionCommentsApiCreateTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionComment>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling createTransactionComment().'
            );
        }

        if (requestParameters['claimTransactionCommentCreate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionCommentCreate',
                'Required parameter "claimTransactionCommentCreate" was null or undefined when calling createTransactionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/comments`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionCommentCreateToJSON(requestParameters['claimTransactionCommentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionCommentFromJSON(jsonValue));
    }

    /**
     * Create a new comment for a transaction
     * Create a Comment
     */
    async createTransactionComment(requestParameters: TransactionCommentsApiCreateTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionComment> {
        const response = await this.createTransactionCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing transaction comment
     * Delete a Comment
     */
    async deleteTransactionCommentRaw(requestParameters: TransactionCommentsApiDeleteTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTransactionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing transaction comment
     * Delete a Comment
     */
    async deleteTransactionComment(requestParameters: TransactionCommentsApiDeleteTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransactionCommentRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all transaction comments across all transactions with optional filters
     * List all Comments
     */
    async getAllTransactionCommentsRaw(requestParameters: TransactionCommentsApiGetAllTransactionCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllTransactionComments200Response>> {
        const queryParameters: any = {};

        if (requestParameters['commentType'] != null) {
            queryParameters['comment_type'] = requestParameters['commentType'];
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = (requestParameters['createdAfter'] as any).toISOString();
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = (requestParameters['createdBefore'] as any).toISOString();
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllTransactionComments200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all transaction comments across all transactions with optional filters
     * List all Comments
     */
    async getAllTransactionComments(requestParameters: TransactionCommentsApiGetAllTransactionCommentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllTransactionComments200Response> {
        const response = await this.getAllTransactionCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single transaction comment by ID
     * Get a Comment
     */
    async getTransactionCommentRaw(requestParameters: TransactionCommentsApiGetTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionComment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTransactionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionCommentFromJSON(jsonValue));
    }

    /**
     * Retrieve a single transaction comment by ID
     * Get a Comment
     */
    async getTransactionComment(requestParameters: TransactionCommentsApiGetTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionComment> {
        const response = await this.getTransactionCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all comments for a specific transaction with optional pagination
     * Get Comments
     */
    async getTransactionCommentsRaw(requestParameters: TransactionCommentsApiGetTransactionCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllTransactionComments200Response>> {
        if (requestParameters['transactionID'] == null) {
            throw new runtime.RequiredError(
                'transactionID',
                'Required parameter "transactionID" was null or undefined when calling getTransactionComments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['commentType'] != null) {
            queryParameters['comment_type'] = requestParameters['commentType'];
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = (requestParameters['createdAfter'] as any).toISOString();
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = (requestParameters['createdBefore'] as any).toISOString();
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/{transactionID}/comments`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters['transactionID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllTransactionComments200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all comments for a specific transaction with optional pagination
     * Get Comments
     */
    async getTransactionComments(requestParameters: TransactionCommentsApiGetTransactionCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllTransactionComments200Response> {
        const response = await this.getTransactionCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing transaction comment
     * Update a Comment
     */
    async updateTransactionCommentRaw(requestParameters: TransactionCommentsApiUpdateTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimTransactionComment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTransactionComment().'
            );
        }

        if (requestParameters['claimTransactionCommentCreate'] == null) {
            throw new runtime.RequiredError(
                'claimTransactionCommentCreate',
                'Required parameter "claimTransactionCommentCreate" was null or undefined when calling updateTransactionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/transactions/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimTransactionCommentCreateToJSON(requestParameters['claimTransactionCommentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimTransactionCommentFromJSON(jsonValue));
    }

    /**
     * Update an existing transaction comment
     * Update a Comment
     */
    async updateTransactionComment(requestParameters: TransactionCommentsApiUpdateTransactionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimTransactionComment> {
        const response = await this.updateTransactionCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllTransactionCommentsCommentTypeEnum = {
    Broker: 'broker',
    Private: 'private',
    Public: 'public',
    CrossMarket: 'cross_market'
} as const;
export type GetAllTransactionCommentsCommentTypeEnum = typeof GetAllTransactionCommentsCommentTypeEnum[keyof typeof GetAllTransactionCommentsCommentTypeEnum];
/**
 * @export
 */
export const GetTransactionCommentsCommentTypeEnum = {
    Broker: 'broker',
    Private: 'private',
    Public: 'public',
    CrossMarket: 'cross_market'
} as const;
export type GetTransactionCommentsCommentTypeEnum = typeof GetTransactionCommentsCommentTypeEnum[keyof typeof GetTransactionCommentsCommentTypeEnum];
