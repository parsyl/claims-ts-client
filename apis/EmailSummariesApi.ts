/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailSummary,
  EmailSummaryCreate,
  EmailSummaryUpdate,
  GetEmailSummaries200Response,
  PatchEmailSummaryRequest,
  ProcessEmailSummaryRequest,
  ValidationErrors,
} from '../models/index';
import {
    EmailSummaryFromJSON,
    EmailSummaryToJSON,
    EmailSummaryCreateFromJSON,
    EmailSummaryCreateToJSON,
    EmailSummaryUpdateFromJSON,
    EmailSummaryUpdateToJSON,
    GetEmailSummaries200ResponseFromJSON,
    GetEmailSummaries200ResponseToJSON,
    PatchEmailSummaryRequestFromJSON,
    PatchEmailSummaryRequestToJSON,
    ProcessEmailSummaryRequestFromJSON,
    ProcessEmailSummaryRequestToJSON,
    ValidationErrorsFromJSON,
    ValidationErrorsToJSON,
} from '../models/index';

export interface EmailSummariesApiAssociateEmailSummaryWithClaimRequest {
    claimID: string;
    summaryID: string;
}

export interface EmailSummariesApiCreateEmailSummaryRequest {
    emailSummaryCreate: EmailSummaryCreate;
}

export interface EmailSummariesApiDeleteEmailSummaryRequest {
    id: string;
}

export interface EmailSummariesApiGetClaimEmailSummariesRequest {
    claimID: string;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface EmailSummariesApiGetEmailSummariesRequest {
    threadId?: string;
    claimId?: string;
    status?: GetEmailSummariesStatusEnum;
    createdAfter?: Date;
    createdBefore?: Date;
    updatedAfter?: Date;
    updatedBefore?: Date;
    cursor?: string;
    limit?: number;
    includeTotal?: boolean;
}

export interface EmailSummariesApiGetEmailSummaryRequest {
    id: string;
}

export interface EmailSummariesApiPatchEmailSummaryOperationRequest {
    id: string;
    patchEmailSummaryRequest: PatchEmailSummaryRequest;
}

export interface EmailSummariesApiProcessEmailSummaryOperationRequest {
    processEmailSummaryRequest: ProcessEmailSummaryRequest;
}

export interface EmailSummariesApiRemoveEmailSummaryFromClaimRequest {
    claimID: string;
    summaryID: string;
}

export interface EmailSummariesApiUpdateEmailSummaryRequest {
    id: string;
    emailSummaryUpdate: EmailSummaryUpdate;
}

/**
 * 
 */
export class EmailSummariesApi extends runtime.BaseAPI {

    /**
     * Create an association between an email summary and a claim
     * Associate Email Summary with Claim
     */
    async associateEmailSummaryWithClaimRaw(requestParameters: EmailSummariesApiAssociateEmailSummaryWithClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['claimID'] == null) {
            throw new runtime.RequiredError(
                'claimID',
                'Required parameter "claimID" was null or undefined when calling associateEmailSummaryWithClaim().'
            );
        }

        if (requestParameters['summaryID'] == null) {
            throw new runtime.RequiredError(
                'summaryID',
                'Required parameter "summaryID" was null or undefined when calling associateEmailSummaryWithClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claimID}/email-summaries/{summaryID}`.replace(`{${"claimID"}}`, encodeURIComponent(String(requestParameters['claimID']))).replace(`{${"summaryID"}}`, encodeURIComponent(String(requestParameters['summaryID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an association between an email summary and a claim
     * Associate Email Summary with Claim
     */
    async associateEmailSummaryWithClaim(requestParameters: EmailSummariesApiAssociateEmailSummaryWithClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.associateEmailSummaryWithClaimRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new email summary
     * Create an Email Summary
     */
    async createEmailSummaryRaw(requestParameters: EmailSummariesApiCreateEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSummary>> {
        if (requestParameters['emailSummaryCreate'] == null) {
            throw new runtime.RequiredError(
                'emailSummaryCreate',
                'Required parameter "emailSummaryCreate" was null or undefined when calling createEmailSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSummaryCreateToJSON(requestParameters['emailSummaryCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSummaryFromJSON(jsonValue));
    }

    /**
     * Create a new email summary
     * Create an Email Summary
     */
    async createEmailSummary(requestParameters: EmailSummariesApiCreateEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSummary> {
        const response = await this.createEmailSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an email summary by ID
     * Delete an Email Summary
     */
    async deleteEmailSummaryRaw(requestParameters: EmailSummariesApiDeleteEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteEmailSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an email summary by ID
     * Delete an Email Summary
     */
    async deleteEmailSummary(requestParameters: EmailSummariesApiDeleteEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmailSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * Get all email summaries associated with a specific claim
     * Get Email Summaries for a Claim
     */
    async getClaimEmailSummariesRaw(requestParameters: EmailSummariesApiGetClaimEmailSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailSummaries200Response>> {
        if (requestParameters['claimID'] == null) {
            throw new runtime.RequiredError(
                'claimID',
                'Required parameter "claimID" was null or undefined when calling getClaimEmailSummaries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claimID}/email-summaries`.replace(`{${"claimID"}}`, encodeURIComponent(String(requestParameters['claimID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmailSummaries200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all email summaries associated with a specific claim
     * Get Email Summaries for a Claim
     */
    async getClaimEmailSummaries(requestParameters: EmailSummariesApiGetClaimEmailSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailSummaries200Response> {
        const response = await this.getClaimEmailSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all email summaries with optional filtering
     * Get Email Summaries
     */
    async getEmailSummariesRaw(requestParameters: EmailSummariesApiGetEmailSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailSummaries200Response>> {
        const queryParameters: any = {};

        if (requestParameters['threadId'] != null) {
            queryParameters['thread_id'] = requestParameters['threadId'];
        }

        if (requestParameters['claimId'] != null) {
            queryParameters['claim_id'] = requestParameters['claimId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = (requestParameters['createdAfter'] as any).toISOString();
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = (requestParameters['createdBefore'] as any).toISOString();
        }

        if (requestParameters['updatedAfter'] != null) {
            queryParameters['updated_after'] = (requestParameters['updatedAfter'] as any).toISOString();
        }

        if (requestParameters['updatedBefore'] != null) {
            queryParameters['updated_before'] = (requestParameters['updatedBefore'] as any).toISOString();
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['includeTotal'] != null) {
            queryParameters['include_total'] = requestParameters['includeTotal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmailSummaries200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all email summaries with optional filtering
     * Get Email Summaries
     */
    async getEmailSummaries(requestParameters: EmailSummariesApiGetEmailSummariesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailSummaries200Response> {
        const response = await this.getEmailSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an email summary by ID
     * Get an Email Summary
     */
    async getEmailSummaryRaw(requestParameters: EmailSummariesApiGetEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSummary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEmailSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSummaryFromJSON(jsonValue));
    }

    /**
     * Get an email summary by ID
     * Get an Email Summary
     */
    async getEmailSummary(requestParameters: EmailSummariesApiGetEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSummary> {
        const response = await this.getEmailSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update an email summary by ID
     * Partially Update an Email Summary
     */
    async patchEmailSummaryRaw(requestParameters: EmailSummariesApiPatchEmailSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSummary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchEmailSummary().'
            );
        }

        if (requestParameters['patchEmailSummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'patchEmailSummaryRequest',
                'Required parameter "patchEmailSummaryRequest" was null or undefined when calling patchEmailSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchEmailSummaryRequestToJSON(requestParameters['patchEmailSummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSummaryFromJSON(jsonValue));
    }

    /**
     * Partially update an email summary by ID
     * Partially Update an Email Summary
     */
    async patchEmailSummary(requestParameters: EmailSummariesApiPatchEmailSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSummary> {
        const response = await this.patchEmailSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate email summarization process by calling n8n webhook and storing the result
     * Process Email Summary
     */
    async processEmailSummaryRaw(requestParameters: EmailSummariesApiProcessEmailSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSummary>> {
        if (requestParameters['processEmailSummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'processEmailSummaryRequest',
                'Required parameter "processEmailSummaryRequest" was null or undefined when calling processEmailSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries/process`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessEmailSummaryRequestToJSON(requestParameters['processEmailSummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSummaryFromJSON(jsonValue));
    }

    /**
     * Initiate email summarization process by calling n8n webhook and storing the result
     * Process Email Summary
     */
    async processEmailSummary(requestParameters: EmailSummariesApiProcessEmailSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSummary> {
        const response = await this.processEmailSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the association between an email summary and a claim
     * Remove Email Summary from Claim
     */
    async removeEmailSummaryFromClaimRaw(requestParameters: EmailSummariesApiRemoveEmailSummaryFromClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['claimID'] == null) {
            throw new runtime.RequiredError(
                'claimID',
                'Required parameter "claimID" was null or undefined when calling removeEmailSummaryFromClaim().'
            );
        }

        if (requestParameters['summaryID'] == null) {
            throw new runtime.RequiredError(
                'summaryID',
                'Required parameter "summaryID" was null or undefined when calling removeEmailSummaryFromClaim().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/claims/{claimID}/email-summaries/{summaryID}`.replace(`{${"claimID"}}`, encodeURIComponent(String(requestParameters['claimID']))).replace(`{${"summaryID"}}`, encodeURIComponent(String(requestParameters['summaryID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the association between an email summary and a claim
     * Remove Email Summary from Claim
     */
    async removeEmailSummaryFromClaim(requestParameters: EmailSummariesApiRemoveEmailSummaryFromClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeEmailSummaryFromClaimRaw(requestParameters, initOverrides);
    }

    /**
     * Update an email summary by ID
     * Update an Email Summary
     */
    async updateEmailSummaryRaw(requestParameters: EmailSummariesApiUpdateEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSummary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateEmailSummary().'
            );
        }

        if (requestParameters['emailSummaryUpdate'] == null) {
            throw new runtime.RequiredError(
                'emailSummaryUpdate',
                'Required parameter "emailSummaryUpdate" was null or undefined when calling updateEmailSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/email-summaries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSummaryUpdateToJSON(requestParameters['emailSummaryUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSummaryFromJSON(jsonValue));
    }

    /**
     * Update an email summary by ID
     * Update an Email Summary
     */
    async updateEmailSummary(requestParameters: EmailSummariesApiUpdateEmailSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSummary> {
        const response = await this.updateEmailSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetEmailSummariesStatusEnum = {
    Pending: 'pending',
    Failed: 'failed',
    Complete: 'complete'
} as const;
export type GetEmailSummariesStatusEnum = typeof GetEmailSummariesStatusEnum[keyof typeof GetEmailSummariesStatusEnum];
