/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ECFClaimResponse,
  ECFClaimRetrieve,
  ECFDocumentSearch,
  ECFDocumentUpload,
  ECFResponse,
  ValidationErrors,
} from '../models/index';
import {
    ECFClaimResponseFromJSON,
    ECFClaimResponseToJSON,
    ECFClaimRetrieveFromJSON,
    ECFClaimRetrieveToJSON,
    ECFDocumentSearchFromJSON,
    ECFDocumentSearchToJSON,
    ECFDocumentUploadFromJSON,
    ECFDocumentUploadToJSON,
    ECFResponseFromJSON,
    ECFResponseToJSON,
    ValidationErrorsFromJSON,
    ValidationErrorsToJSON,
} from '../models/index';

export interface ECFIntegrationApiEcfClaimRespondRequest {
    eCFClaimResponse: ECFClaimResponse;
}

export interface ECFIntegrationApiEcfClaimRetrieveRequest {
    eCFClaimRetrieve: ECFClaimRetrieve;
}

export interface ECFIntegrationApiEcfDocumentSearchRequest {
    eCFDocumentSearch: ECFDocumentSearch;
}

export interface ECFIntegrationApiEcfDocumentUploadRequest {
    eCFDocumentUpload: ECFDocumentUpload;
}

/**
 * 
 */
export class ECFIntegrationApi extends runtime.BaseAPI {

    /**
     * Send a claim response to ECF integration service via SQS
     * ECF Claim Respond
     */
    async ecfClaimRespondRaw(requestParameters: ECFIntegrationApiEcfClaimRespondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECFResponse>> {
        if (requestParameters['eCFClaimResponse'] == null) {
            throw new runtime.RequiredError(
                'eCFClaimResponse',
                'Required parameter "eCFClaimResponse" was null or undefined when calling ecfClaimRespond().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/ecf/claim-respond`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECFClaimResponseToJSON(requestParameters['eCFClaimResponse']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECFResponseFromJSON(jsonValue));
    }

    /**
     * Send a claim response to ECF integration service via SQS
     * ECF Claim Respond
     */
    async ecfClaimRespond(requestParameters: ECFIntegrationApiEcfClaimRespondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECFResponse> {
        const response = await this.ecfClaimRespondRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a claim retrieve request to ECF integration service via SQS
     * ECF Claim Retrieve
     */
    async ecfClaimRetrieveRaw(requestParameters: ECFIntegrationApiEcfClaimRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECFResponse>> {
        if (requestParameters['eCFClaimRetrieve'] == null) {
            throw new runtime.RequiredError(
                'eCFClaimRetrieve',
                'Required parameter "eCFClaimRetrieve" was null or undefined when calling ecfClaimRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/ecf/claim-retrieve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECFClaimRetrieveToJSON(requestParameters['eCFClaimRetrieve']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECFResponseFromJSON(jsonValue));
    }

    /**
     * Send a claim retrieve request to ECF integration service via SQS
     * ECF Claim Retrieve
     */
    async ecfClaimRetrieve(requestParameters: ECFIntegrationApiEcfClaimRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECFResponse> {
        const response = await this.ecfClaimRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a document search request to ECF integration service via SQS
     * ECF Document Search
     */
    async ecfDocumentSearchRaw(requestParameters: ECFIntegrationApiEcfDocumentSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECFResponse>> {
        if (requestParameters['eCFDocumentSearch'] == null) {
            throw new runtime.RequiredError(
                'eCFDocumentSearch',
                'Required parameter "eCFDocumentSearch" was null or undefined when calling ecfDocumentSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/ecf/document-search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECFDocumentSearchToJSON(requestParameters['eCFDocumentSearch']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECFResponseFromJSON(jsonValue));
    }

    /**
     * Send a document search request to ECF integration service via SQS
     * ECF Document Search
     */
    async ecfDocumentSearch(requestParameters: ECFIntegrationApiEcfDocumentSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECFResponse> {
        const response = await this.ecfDocumentSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a document upload request to ECF integration service via SQS
     * ECF Document Upload
     */
    async ecfDocumentUploadRaw(requestParameters: ECFIntegrationApiEcfDocumentUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECFResponse>> {
        if (requestParameters['eCFDocumentUpload'] == null) {
            throw new runtime.RequiredError(
                'eCFDocumentUpload',
                'Required parameter "eCFDocumentUpload" was null or undefined when calling ecfDocumentUpload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("jwt-authorizer-oauth", []);
        }

        const response = await this.request({
            path: `/ecf/document-upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECFDocumentUploadToJSON(requestParameters['eCFDocumentUpload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECFResponseFromJSON(jsonValue));
    }

    /**
     * Send a document upload request to ECF integration service via SQS
     * ECF Document Upload
     */
    async ecfDocumentUpload(requestParameters: ECFIntegrationApiEcfDocumentUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECFResponse> {
        const response = await this.ecfDocumentUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
