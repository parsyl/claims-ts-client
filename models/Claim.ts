/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Claim
 */
export interface Claim {
    /**
     * Unique internal ID for the claim
     * @type {string}
     * @memberof Claim
     */
    id: string;
    /**
     * Internal claim status
     * @type {string}
     * @memberof Claim
     */
    status: ClaimStatusEnum;
    /**
     * Internal claim type
     * @type {string}
     * @memberof Claim
     */
    type: string;
    /**
     * What is our role on this claim
     * @type {string}
     * @memberof Claim
     */
    participation: string;
    /**
     * The loss or event name associated with the claim
     * @type {string}
     * @memberof Claim
     */
    lossOrEventName?: string;
    /**
     * Claims cause of loss
     * @type {string}
     * @memberof Claim
     */
    causeOfLoss?: string;
    /**
     * Location where the loss event occurred
     * @type {string}
     * @memberof Claim
     */
    lossLocation?: string;
    /**
     * Name of the vessel associated with the claim
     * @type {string}
     * @memberof Claim
     */
    vesselName?: string;
    /**
     * Internal Policy ID for reference back to Policy API
     * @type {string}
     * @memberof Claim
     */
    policyId: string;
    /**
     * Internal friendly claim reference
     * @type {string}
     * @memberof Claim
     */
    insurerReference?: string;
    /**
     * ECF -> UCR
     * @type {string}
     * @memberof Claim
     */
    brokerClaimReference?: string;
    /**
     * ECF -> UMR
     * @type {string}
     * @memberof Claim
     */
    brokerPolicyReference?: string;
    /**
     * Risk code associated with the claim
     * @type {string}
     * @memberof Claim
     */
    riskCode?: string;
    /**
     * Class of business associated with the claim
     * @type {string}
     * @memberof Claim
     */
    classOfBusiness?: string;
    /**
     * Underwriting year associated with the claim
     * @type {string}
     * @memberof Claim
     */
    underwritingYear?: string;
    /**
     * Date received first notice of loss
     * @type {Date}
     * @memberof Claim
     */
    fnolDate?: Date;
    /**
     * Date of the loss event
     * @type {Date}
     * @memberof Claim
     */
    lossDate?: Date;
    /**
     * Date the claim was closed
     * @type {Date}
     * @memberof Claim
     */
    closeDate?: Date;
    /**
     * Timestamp when the claim was created
     * @type {Date}
     * @memberof Claim
     */
    createdAt: Date;
    /**
     * Timestamp when the claim was last updated
     * @type {Date}
     * @memberof Claim
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const ClaimStatusEnum = {
    FirstNoticeOfLoss: 'first_notice_of_loss',
    Hold: 'hold',
    WaitingSurveyor: 'waiting_surveyor',
    OngoingInvestigation: 'ongoing_investigation',
    AwaitingDocs: 'awaiting_docs',
    NoCollaboration: 'no_collaboration',
    WaitingInvestigationReport: 'waiting_investigation_report',
    CoverageReview: 'coverage_review',
    LegalReview: 'legal_review',
    ReferredDenial: 'referred_denial',
    DenialIssued: 'denial_issued',
    Settlement: 'settlement',
    WaitingVendorBilling: 'waiting_vendor_billing',
    Recovery: 'recovery',
    ClosedPaid: 'closed_paid',
    ClosedDenied: 'closed_denied',
    ClosedWithdrawn: 'closed_withdrawn'
} as const;
export type ClaimStatusEnum = typeof ClaimStatusEnum[keyof typeof ClaimStatusEnum];


/**
 * Check if a given object implements the Claim interface.
 */
export function instanceOfClaim(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('status' in value)) return false;
    if (!('type' in value)) return false;
    if (!('participation' in value)) return false;
    if (!('policyId' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function ClaimFromJSON(json: any): Claim {
    return ClaimFromJSONTyped(json, false);
}

export function ClaimFromJSONTyped(json: any, ignoreDiscriminator: boolean): Claim {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'status': json['status'],
        'type': json['type'],
        'participation': json['participation'],
        'lossOrEventName': json['loss_or_event_name'] == null ? undefined : json['loss_or_event_name'],
        'causeOfLoss': json['cause_of_loss'] == null ? undefined : json['cause_of_loss'],
        'lossLocation': json['loss_location'] == null ? undefined : json['loss_location'],
        'vesselName': json['vessel_name'] == null ? undefined : json['vessel_name'],
        'policyId': json['policy_id'],
        'insurerReference': json['insurer_reference'] == null ? undefined : json['insurer_reference'],
        'brokerClaimReference': json['broker_claim_reference'] == null ? undefined : json['broker_claim_reference'],
        'brokerPolicyReference': json['broker_policy_reference'] == null ? undefined : json['broker_policy_reference'],
        'riskCode': json['risk_code'] == null ? undefined : json['risk_code'],
        'classOfBusiness': json['class_of_business'] == null ? undefined : json['class_of_business'],
        'underwritingYear': json['underwriting_year'] == null ? undefined : json['underwriting_year'],
        'fnolDate': json['fnol_date'] == null ? undefined : (new Date(json['fnol_date'])),
        'lossDate': json['loss_date'] == null ? undefined : (new Date(json['loss_date'])),
        'closeDate': json['close_date'] == null ? undefined : (new Date(json['close_date'])),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function ClaimToJSON(value?: Claim | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'status': value['status'],
        'type': value['type'],
        'participation': value['participation'],
        'loss_or_event_name': value['lossOrEventName'],
        'cause_of_loss': value['causeOfLoss'],
        'loss_location': value['lossLocation'],
        'vessel_name': value['vesselName'],
        'policy_id': value['policyId'],
        'insurer_reference': value['insurerReference'],
        'broker_claim_reference': value['brokerClaimReference'],
        'broker_policy_reference': value['brokerPolicyReference'],
        'risk_code': value['riskCode'],
        'class_of_business': value['classOfBusiness'],
        'underwriting_year': value['underwritingYear'],
        'fnol_date': value['fnolDate'] == null ? undefined : ((value['fnolDate'] as any).toISOString()),
        'loss_date': value['lossDate'] == null ? undefined : ((value['lossDate'] as any).toISOString()),
        'close_date': value['closeDate'] == null ? undefined : ((value['closeDate'] as any).toISOString()),
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

