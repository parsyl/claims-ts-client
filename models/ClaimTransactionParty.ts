/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ClaimTransactionParty
 */
export interface ClaimTransactionParty {
    /**
     * 
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    transactionId: string;
    /**
     * Party role (insurer, broker, serviceProvider, etc.)
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    partyRole: string;
    /**
     * Party identification
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    partyId?: string;
    /**
     * Party agency
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    partyAgency?: string;
    /**
     * Party name
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    partyName?: string;
    /**
     * Contact person name
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    contactPersonName?: string;
    /**
     * Contact telephone
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    contactTelephone?: string;
    /**
     * Contact email
     * @type {string}
     * @memberof ClaimTransactionParty
     */
    contactEmail?: string;
    /**
     * 
     * @type {Date}
     * @memberof ClaimTransactionParty
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the ClaimTransactionParty interface.
 */
export function instanceOfClaimTransactionParty(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('transactionId' in value)) return false;
    if (!('partyRole' in value)) return false;
    if (!('createdAt' in value)) return false;
    return true;
}

export function ClaimTransactionPartyFromJSON(json: any): ClaimTransactionParty {
    return ClaimTransactionPartyFromJSONTyped(json, false);
}

export function ClaimTransactionPartyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimTransactionParty {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'transactionId': json['transaction_id'],
        'partyRole': json['party_role'],
        'partyId': json['party_id'] == null ? undefined : json['party_id'],
        'partyAgency': json['party_agency'] == null ? undefined : json['party_agency'],
        'partyName': json['party_name'] == null ? undefined : json['party_name'],
        'contactPersonName': json['contact_person_name'] == null ? undefined : json['contact_person_name'],
        'contactTelephone': json['contact_telephone'] == null ? undefined : json['contact_telephone'],
        'contactEmail': json['contact_email'] == null ? undefined : json['contact_email'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function ClaimTransactionPartyToJSON(value?: ClaimTransactionParty | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'transaction_id': value['transactionId'],
        'party_role': value['partyRole'],
        'party_id': value['partyId'],
        'party_agency': value['partyAgency'],
        'party_name': value['partyName'],
        'contact_person_name': value['contactPersonName'],
        'contact_telephone': value['contactTelephone'],
        'contact_email': value['contactEmail'],
        'created_at': ((value['createdAt']).toISOString()),
    };
}

