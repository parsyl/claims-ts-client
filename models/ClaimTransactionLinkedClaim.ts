/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ClaimTransactionLinkedEntry } from './ClaimTransactionLinkedEntry';
import {
    ClaimTransactionLinkedEntryFromJSON,
    ClaimTransactionLinkedEntryFromJSONTyped,
    ClaimTransactionLinkedEntryToJSON,
} from './ClaimTransactionLinkedEntry';

/**
 * Represents a claim-to-claim relationship as defined in ECF linkedClaims structure
 * @export
 * @interface ClaimTransactionLinkedClaim
 */
export interface ClaimTransactionLinkedClaim {
    /**
     * Unique identifier for the linked claim relationship
     * @type {string}
     * @memberof ClaimTransactionLinkedClaim
     */
    id: string;
    /**
     * ID of the transaction that links to other claims
     * @type {string}
     * @memberof ClaimTransactionLinkedClaim
     */
    sourceTransactionId: string;
    /**
     * UCR of the claim being linked to
     * @type {string}
     * @memberof ClaimTransactionLinkedClaim
     */
    linkedUcr: string;
    /**
     * Type of relationship: linked (peer), master (parent), subordinate (child)
     * @type {string}
     * @memberof ClaimTransactionLinkedClaim
     */
    relationshipType: ClaimTransactionLinkedClaimRelationshipTypeEnum;
    /**
     * Transaction reference (TR) level links within this claim relationship
     * @type {Array<ClaimTransactionLinkedEntry>}
     * @memberof ClaimTransactionLinkedClaim
     */
    linkedEntries?: Array<ClaimTransactionLinkedEntry>;
    /**
     * When the linked claim relationship was created
     * @type {Date}
     * @memberof ClaimTransactionLinkedClaim
     */
    createdAt: Date;
}


/**
 * @export
 */
export const ClaimTransactionLinkedClaimRelationshipTypeEnum = {
    Linked: 'linked',
    Master: 'master',
    Subordinate: 'subordinate'
} as const;
export type ClaimTransactionLinkedClaimRelationshipTypeEnum = typeof ClaimTransactionLinkedClaimRelationshipTypeEnum[keyof typeof ClaimTransactionLinkedClaimRelationshipTypeEnum];


/**
 * Check if a given object implements the ClaimTransactionLinkedClaim interface.
 */
export function instanceOfClaimTransactionLinkedClaim(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('sourceTransactionId' in value)) return false;
    if (!('linkedUcr' in value)) return false;
    if (!('relationshipType' in value)) return false;
    if (!('createdAt' in value)) return false;
    return true;
}

export function ClaimTransactionLinkedClaimFromJSON(json: any): ClaimTransactionLinkedClaim {
    return ClaimTransactionLinkedClaimFromJSONTyped(json, false);
}

export function ClaimTransactionLinkedClaimFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimTransactionLinkedClaim {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sourceTransactionId': json['source_transaction_id'],
        'linkedUcr': json['linked_ucr'],
        'relationshipType': json['relationship_type'],
        'linkedEntries': json['linked_entries'] == null ? undefined : ((json['linked_entries'] as Array<any>).map(ClaimTransactionLinkedEntryFromJSON)),
        'createdAt': (new Date(json['created_at'])),
    };
}

export function ClaimTransactionLinkedClaimToJSON(value?: ClaimTransactionLinkedClaim | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'source_transaction_id': value['sourceTransactionId'],
        'linked_ucr': value['linkedUcr'],
        'relationship_type': value['relationshipType'],
        'linked_entries': value['linkedEntries'] == null ? undefined : ((value['linkedEntries'] as Array<any>).map(ClaimTransactionLinkedEntryToJSON)),
        'created_at': ((value['createdAt']).toISOString()),
    };
}

