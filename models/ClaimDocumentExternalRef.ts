/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SourceSystem } from './SourceSystem';
import {
    SourceSystemFromJSON,
    SourceSystemFromJSONTyped,
    SourceSystemToJSON,
} from './SourceSystem';
import type { SyncDirection } from './SyncDirection';
import {
    SyncDirectionFromJSON,
    SyncDirectionFromJSONTyped,
    SyncDirectionToJSON,
} from './SyncDirection';
import type { SyncStatus } from './SyncStatus';
import {
    SyncStatusFromJSON,
    SyncStatusFromJSONTyped,
    SyncStatusToJSON,
} from './SyncStatus';

/**
 * 
 * @export
 * @interface ClaimDocumentExternalRef
 */
export interface ClaimDocumentExternalRef {
    /**
     * Unique identifier for the external reference
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    id: string;
    /**
     * Reference to the document this external reference belongs to
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    claimDocumentId: string;
    /**
     * 
     * @type {SourceSystem}
     * @memberof ClaimDocumentExternalRef
     */
    sourceSystem: SourceSystem;
    /**
     * Optional reference to the ECF transaction
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    transactionId?: string;
    /**
     * ECF transaction reference (TR)
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    transactionReference?: string;
    /**
     * Document ID in the external system
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    externalDocumentId?: string;
    /**
     * Version in the external system
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    externalVersion?: string;
    /**
     * Document type in the external system
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    externalDocumentType?: string;
    /**
     * 
     * @type {SyncStatus}
     * @memberof ClaimDocumentExternalRef
     */
    syncStatus: SyncStatus;
    /**
     * 
     * @type {SyncDirection}
     * @memberof ClaimDocumentExternalRef
     */
    syncDirection?: SyncDirection;
    /**
     * Additional metadata about the synchronization
     * @type {object}
     * @memberof ClaimDocumentExternalRef
     */
    syncMetadata?: object;
    /**
     * Timestamp of the last synchronization attempt
     * @type {Date}
     * @memberof ClaimDocumentExternalRef
     */
    lastSyncAt?: Date;
    /**
     * Error message if synchronization failed
     * @type {string}
     * @memberof ClaimDocumentExternalRef
     */
    syncError?: string;
    /**
     * Timestamp when the external reference was created
     * @type {Date}
     * @memberof ClaimDocumentExternalRef
     */
    createdAt: Date;
    /**
     * Timestamp when the external reference was last updated
     * @type {Date}
     * @memberof ClaimDocumentExternalRef
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the ClaimDocumentExternalRef interface.
 */
export function instanceOfClaimDocumentExternalRef(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('claimDocumentId' in value)) return false;
    if (!('sourceSystem' in value)) return false;
    if (!('syncStatus' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function ClaimDocumentExternalRefFromJSON(json: any): ClaimDocumentExternalRef {
    return ClaimDocumentExternalRefFromJSONTyped(json, false);
}

export function ClaimDocumentExternalRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimDocumentExternalRef {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'claimDocumentId': json['claim_document_id'],
        'sourceSystem': SourceSystemFromJSON(json['source_system']),
        'transactionId': json['transaction_id'] == null ? undefined : json['transaction_id'],
        'transactionReference': json['transaction_reference'] == null ? undefined : json['transaction_reference'],
        'externalDocumentId': json['external_document_id'] == null ? undefined : json['external_document_id'],
        'externalVersion': json['external_version'] == null ? undefined : json['external_version'],
        'externalDocumentType': json['external_document_type'] == null ? undefined : json['external_document_type'],
        'syncStatus': SyncStatusFromJSON(json['sync_status']),
        'syncDirection': json['sync_direction'] == null ? undefined : SyncDirectionFromJSON(json['sync_direction']),
        'syncMetadata': json['sync_metadata'] == null ? undefined : json['sync_metadata'],
        'lastSyncAt': json['last_sync_at'] == null ? undefined : (new Date(json['last_sync_at'])),
        'syncError': json['sync_error'] == null ? undefined : json['sync_error'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function ClaimDocumentExternalRefToJSON(value?: ClaimDocumentExternalRef | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'claim_document_id': value['claimDocumentId'],
        'source_system': SourceSystemToJSON(value['sourceSystem']),
        'transaction_id': value['transactionId'],
        'transaction_reference': value['transactionReference'],
        'external_document_id': value['externalDocumentId'],
        'external_version': value['externalVersion'],
        'external_document_type': value['externalDocumentType'],
        'sync_status': SyncStatusToJSON(value['syncStatus']),
        'sync_direction': SyncDirectionToJSON(value['syncDirection']),
        'sync_metadata': value['syncMetadata'],
        'last_sync_at': value['lastSyncAt'] == null ? undefined : ((value['lastSyncAt'] as any).toISOString()),
        'sync_error': value['syncError'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

