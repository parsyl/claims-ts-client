/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ECFClaimResponseClaimEntry } from './ECFClaimResponseClaimEntry';
import {
    ECFClaimResponseClaimEntryFromJSON,
    ECFClaimResponseClaimEntryFromJSONTyped,
    ECFClaimResponseClaimEntryToJSON,
} from './ECFClaimResponseClaimEntry';
import type { ECFClaimResponseClaimResponse } from './ECFClaimResponseClaimResponse';
import {
    ECFClaimResponseClaimResponseFromJSON,
    ECFClaimResponseClaimResponseFromJSONTyped,
    ECFClaimResponseClaimResponseToJSON,
} from './ECFClaimResponseClaimResponse';
import type { ECFClaimResponseResponderContact } from './ECFClaimResponseResponderContact';
import {
    ECFClaimResponseResponderContactFromJSON,
    ECFClaimResponseResponderContactFromJSONTyped,
    ECFClaimResponseResponderContactToJSON,
} from './ECFClaimResponseResponderContact';

/**
 * 
 * @export
 * @interface ECFClaimResponse
 */
export interface ECFClaimResponse {
    /**
     * UUID of the claim transaction being responded to
     * @type {string}
     * @memberof ECFClaimResponse
     */
    referredUUId: string;
    /**
     * Date and time of the response
     * @type {Date}
     * @memberof ECFClaimResponse
     */
    asOfDate: Date;
    /**
     * 
     * @type {ECFClaimResponseResponderContact}
     * @memberof ECFClaimResponse
     */
    responderContact: ECFClaimResponseResponderContact;
    /**
     * Internal insurer transaction reference
     * @type {string}
     * @memberof ECFClaimResponse
     */
    insurerTransactionReference?: string;
    /**
     * Reinsurer transaction reference (not currently used)
     * @type {string}
     * @memberof ECFClaimResponse
     */
    reinsurerTransactionReference?: string;
    /**
     * Contract details for the claim response
     * @type {object}
     * @memberof ECFClaimResponse
     */
    contract: object;
    /**
     * Optional contract section details
     * @type {object}
     * @memberof ECFClaimResponse
     */
    contractSection?: object;
    /**
     * 
     * @type {ECFClaimResponseClaimEntry}
     * @memberof ECFClaimResponse
     */
    claimEntry: ECFClaimResponseClaimEntry;
    /**
     * Claim details
     * @type {object}
     * @memberof ECFClaimResponse
     */
    claim: object;
    /**
     * 
     * @type {ECFClaimResponseClaimResponse}
     * @memberof ECFClaimResponse
     */
    claimResponse: ECFClaimResponseClaimResponse;
}

/**
 * Check if a given object implements the ECFClaimResponse interface.
 */
export function instanceOfECFClaimResponse(value: object): boolean {
    if (!('referredUUId' in value)) return false;
    if (!('asOfDate' in value)) return false;
    if (!('responderContact' in value)) return false;
    if (!('contract' in value)) return false;
    if (!('claimEntry' in value)) return false;
    if (!('claim' in value)) return false;
    if (!('claimResponse' in value)) return false;
    return true;
}

export function ECFClaimResponseFromJSON(json: any): ECFClaimResponse {
    return ECFClaimResponseFromJSONTyped(json, false);
}

export function ECFClaimResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ECFClaimResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'referredUUId': json['ReferredUUId'],
        'asOfDate': (new Date(json['AsOfDate'])),
        'responderContact': ECFClaimResponseResponderContactFromJSON(json['ResponderContact']),
        'insurerTransactionReference': json['InsurerTransactionReference'] == null ? undefined : json['InsurerTransactionReference'],
        'reinsurerTransactionReference': json['ReinsurerTransactionReference'] == null ? undefined : json['ReinsurerTransactionReference'],
        'contract': json['Contract'],
        'contractSection': json['ContractSection'] == null ? undefined : json['ContractSection'],
        'claimEntry': ECFClaimResponseClaimEntryFromJSON(json['ClaimEntry']),
        'claim': json['Claim'],
        'claimResponse': ECFClaimResponseClaimResponseFromJSON(json['ClaimResponse']),
    };
}

export function ECFClaimResponseToJSON(value?: ECFClaimResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'ReferredUUId': value['referredUUId'],
        'AsOfDate': ((value['asOfDate']).toISOString()),
        'ResponderContact': ECFClaimResponseResponderContactToJSON(value['responderContact']),
        'InsurerTransactionReference': value['insurerTransactionReference'],
        'ReinsurerTransactionReference': value['reinsurerTransactionReference'],
        'Contract': value['contract'],
        'ContractSection': value['contractSection'],
        'ClaimEntry': ECFClaimResponseClaimEntryToJSON(value['claimEntry']),
        'Claim': value['claim'],
        'ClaimResponse': ECFClaimResponseClaimResponseToJSON(value['claimResponse']),
    };
}

