/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ThirdPartyEntity
 */
export interface ThirdPartyEntity {
    /**
     * Unique internal ID for the third party entity
     * @type {string}
     * @memberof ThirdPartyEntity
     */
    id: string;
    /**
     * ID of the associated claim
     * @type {string}
     * @memberof ThirdPartyEntity
     */
    claimId: string;
    /**
     * Type of third party entity
     * @type {string}
     * @memberof ThirdPartyEntity
     */
    entityType: ThirdPartyEntityEntityTypeEnum;
    /**
     * Name of the third party entity
     * @type {string}
     * @memberof ThirdPartyEntity
     */
    name?: string;
    /**
     * Reference identifier for the third party entity
     * @type {string}
     * @memberof ThirdPartyEntity
     */
    reference?: string;
    /**
     * Timestamp when the entity was created
     * @type {Date}
     * @memberof ThirdPartyEntity
     */
    createdAt: Date;
    /**
     * Timestamp when the entity was last updated
     * @type {Date}
     * @memberof ThirdPartyEntity
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const ThirdPartyEntityEntityTypeEnum = {
    Tpa: 'tpa',
    Adjuster: 'adjuster',
    Lawyer: 'lawyer'
} as const;
export type ThirdPartyEntityEntityTypeEnum = typeof ThirdPartyEntityEntityTypeEnum[keyof typeof ThirdPartyEntityEntityTypeEnum];


/**
 * Check if a given object implements the ThirdPartyEntity interface.
 */
export function instanceOfThirdPartyEntity(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('claimId' in value)) return false;
    if (!('entityType' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function ThirdPartyEntityFromJSON(json: any): ThirdPartyEntity {
    return ThirdPartyEntityFromJSONTyped(json, false);
}

export function ThirdPartyEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThirdPartyEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'claimId': json['claim_id'],
        'entityType': json['entity_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'reference': json['reference'] == null ? undefined : json['reference'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function ThirdPartyEntityToJSON(value?: ThirdPartyEntity | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'claim_id': value['claimId'],
        'entity_type': value['entityType'],
        'name': value['name'],
        'reference': value['reference'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

