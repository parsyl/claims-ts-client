/* tslint:disable */
/* eslint-disable */
/**
 * Claims API
 * API for managing insurance claims and ECF transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentSource } from './DocumentSource';
import {
    DocumentSourceFromJSON,
    DocumentSourceFromJSONTyped,
    DocumentSourceToJSON,
} from './DocumentSource';

/**
 * 
 * @export
 * @interface ClaimDocument
 */
export interface ClaimDocument {
    /**
     * Unique identifier for the document
     * @type {string}
     * @memberof ClaimDocument
     */
    id: string;
    /**
     * Reference to the claim this document belongs to
     * @type {string}
     * @memberof ClaimDocument
     */
    claimId: string;
    /**
     * Optional reference to the transaction this document belongs to
     * @type {string}
     * @memberof ClaimDocument
     */
    transactionId?: string;
    /**
     * Name of the file
     * @type {string}
     * @memberof ClaimDocument
     */
    fileName: string;
    /**
     * Size of the file in bytes
     * @type {number}
     * @memberof ClaimDocument
     */
    fileSizeBytes: number;
    /**
     * MIME type of the file
     * @type {string}
     * @memberof ClaimDocument
     */
    contentType: string;
    /**
     * Type of document
     * @type {string}
     * @memberof ClaimDocument
     */
    documentType: ClaimDocumentDocumentTypeEnum;
    /**
     * 
     * @type {DocumentSource}
     * @memberof ClaimDocument
     */
    documentSource: DocumentSource;
    /**
     * S3 key for the stored file
     * @type {string}
     * @memberof ClaimDocument
     */
    s3Key: string;
    /**
     * S3 bucket where the file is stored
     * @type {string}
     * @memberof ClaimDocument
     */
    s3Bucket: string;
    /**
     * Version number of the document
     * @type {number}
     * @memberof ClaimDocument
     */
    documentVersion: number;
    /**
     * Optional description of the document
     * @type {string}
     * @memberof ClaimDocument
     */
    description?: string;
    /**
     * Who uploaded the document
     * @type {string}
     * @memberof ClaimDocument
     */
    uploadedBy?: string;
    /**
     * Timestamp when the document was created
     * @type {Date}
     * @memberof ClaimDocument
     */
    createdAt: Date;
    /**
     * Timestamp when the document was last updated
     * @type {Date}
     * @memberof ClaimDocument
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const ClaimDocumentDocumentTypeEnum = {
    Policy: 'policy',
    Claim: 'claim',
    ProofOfLoss: 'proof_of_loss',
    Correspondence: 'correspondence',
    Invoice: 'invoice',
    Receipt: 'receipt',
    Photo: 'photo',
    Report: 'report',
    Document: 'document',
    Other: 'other'
} as const;
export type ClaimDocumentDocumentTypeEnum = typeof ClaimDocumentDocumentTypeEnum[keyof typeof ClaimDocumentDocumentTypeEnum];


/**
 * Check if a given object implements the ClaimDocument interface.
 */
export function instanceOfClaimDocument(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('claimId' in value)) return false;
    if (!('fileName' in value)) return false;
    if (!('fileSizeBytes' in value)) return false;
    if (!('contentType' in value)) return false;
    if (!('documentType' in value)) return false;
    if (!('documentSource' in value)) return false;
    if (!('s3Key' in value)) return false;
    if (!('s3Bucket' in value)) return false;
    if (!('documentVersion' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function ClaimDocumentFromJSON(json: any): ClaimDocument {
    return ClaimDocumentFromJSONTyped(json, false);
}

export function ClaimDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimDocument {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'claimId': json['claim_id'],
        'transactionId': json['transaction_id'] == null ? undefined : json['transaction_id'],
        'fileName': json['file_name'],
        'fileSizeBytes': json['file_size_bytes'],
        'contentType': json['content_type'],
        'documentType': json['document_type'],
        'documentSource': DocumentSourceFromJSON(json['document_source']),
        's3Key': json['s3_key'],
        's3Bucket': json['s3_bucket'],
        'documentVersion': json['document_version'],
        'description': json['description'] == null ? undefined : json['description'],
        'uploadedBy': json['uploaded_by'] == null ? undefined : json['uploaded_by'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function ClaimDocumentToJSON(value?: ClaimDocument | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'claim_id': value['claimId'],
        'transaction_id': value['transactionId'],
        'file_name': value['fileName'],
        'file_size_bytes': value['fileSizeBytes'],
        'content_type': value['contentType'],
        'document_type': value['documentType'],
        'document_source': DocumentSourceToJSON(value['documentSource']),
        's3_key': value['s3Key'],
        's3_bucket': value['s3Bucket'],
        'document_version': value['documentVersion'],
        'description': value['description'],
        'uploaded_by': value['uploadedBy'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

